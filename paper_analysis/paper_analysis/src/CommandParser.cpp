//
// Created by qijiabao on 1/7/2024.
//
/*************************************************************************
 * @Project:     paper_analysis
 * @File:        CommandParser.cpp
 * @Brief:       Brief description of the file
 * @Author:      qijiabao
 * @Contact:     Your Contact Information (e.g., email)
 * @Date:        1/7/2024
 * @Description: 
 *               This file is generated by CLion to provide a
 *               template for C/C++ source or header files. You can modify
 *               this template according to your project's needs.
 * @Note:        Additional notes or important points related to the file.
 * @License:     License information if applicable.
 * @Version:     Version number or other version information.
 * @TODO:        List of tasks or things to be done in the file (if any).
 * @Bug:         List of known issues or bugs (if any).
 * @IDE:         CLion
 ************************************************************************/
// Include necessary headers, if any

// Additional comments or code go here
#include "CommandParser.h"

namespace qi{

CommandParser::CommandParser()
{

  // 初始化命令映射
  commandMap_["space"] = "kong";
  commandMap_["line"] = "huanhang";
  commandMap_["main"] = "zhengwen";
  // 添加其他命令映射...
}
CommandParser::~CommandParser()
{
}
void CommandParser::processCommand(const std::string &commandString)
{
  // 存储当前token，也就是原始字符串
  std::string token;
  token = commandString;
  size_t pos = 0;
  while ((pos = token.find('$', pos)) != std::string::npos)
  {
    size_t endPos = token.find_first_not_of("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_", pos + 1);
    std::string command = token.substr(pos + 1, endPos - pos - 1);

    auto it = commandMap_.find(command);
    if (it != commandMap_.end())
    {
      token.replace(pos, endPos - pos, it->second);
    } else
    {
      token.replace(pos, endPos - pos, command + "为非法命令");
    }

    pos = endPos;
  }
  result_ = token;
}
std::string CommandParser::parseCommand(const std::string &commandString)
{
  // 处理命令
  processCommand(commandString);
  return result_;
}
}// namespace qi