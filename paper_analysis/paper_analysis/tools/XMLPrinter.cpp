//
// Created by qijiabao on 2/29/2024.
//
/*************************************************************************
 * @Project:     paper_analysis
 * @File:        XMLPrinter.cpp
 * @Brief:       Brief description of the file
 * @Author:      qijiabao
 * @Contact:     Your Contact Information (e.g., email)
 * @Date:        2/29/2024
 * @Description: 
 *               This file is generated by CLion to provide a
 *               template for C/C++ source or header files. You can modify
 *               this template according to your project's needs.
 * @Note:        Additional notes or important points related to the file.
 * @License:     License information if applicable.
 * @Version:     Version number or other version information.
 * @TODO:        List of tasks or things to be done in the file (if any).
 * @Bug:         List of known issues or bugs (if any).
 * @IDE:         CLion
 ************************************************************************/
// Include necessary headers, if any

// Additional comments or code go here
#include "XMLPrinter.h"

namespace qi {

void XMLPrinter::printElement(const DOMElement* element) {
    if (!element) {
        std::cerr << "Error: Null element pointer." << std::endl;
        return;
    }

    std::cout << "<" << XMLString::transcode(element->getTagName());

    // 输出元素属性
    const DOMNamedNodeMap* attributes = element->getAttributes();
    const XMLSize_t attributeCount = attributes->getLength();
    for (XMLSize_t i = 0; i < attributeCount; ++i) {
        const DOMNode* attribute = attributes->item(i);
        std::cout << " " << XMLString::transcode(attribute->getNodeName()) << "=\""
                  << XMLString::transcode(attribute->getNodeValue()) << "\"";
    }

    std::cout << ">";

    // 输出子元素
    DOMNodeList* children = element->getChildNodes();
    const XMLSize_t childCount = children->getLength();
    for (XMLSize_t i = 0; i < childCount; ++i) {
        DOMNode* child = children->item(i);
        printNode(child);
    }

    std::cout << "</" << XMLString::transcode(element->getTagName()) << ">" << std::endl;
}

void XMLPrinter::printNode(const DOMNode* node) {
    if (!node) {
        std::cerr << "Error: Null node pointer." << std::endl;
        return;
    }

    switch (node->getNodeType()) {
        case DOMNode::ELEMENT_NODE:
            printElement(dynamic_cast<const DOMElement*>(node));
            break;
        case DOMNode::TEXT_NODE:
            std::cout << XMLString::transcode(node->getNodeValue());
            break;
        // 可根据需要处理其他类型的节点
        default:
            break;
    }
}

void XMLPrinter::print(const std::string str) {
    std::cout << str << std::endl;
}

} // namespace qi
