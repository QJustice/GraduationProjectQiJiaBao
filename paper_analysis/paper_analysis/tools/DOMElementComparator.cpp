//
// Created by qijiabao on 1/14/2024.
//
/*************************************************************************
 * @Project:     paper_analysis
 * @File:        DOMElementComparator.cpp
 * @Brief:       Brief description of the file
 * @Author:      qijiabao
 * @Contact:     Your Contact Information (e.g., email)
 * @Date:        1/14/2024
 * @Description: 
 *               This file is generated by CLion to provide a
 *               template for C/C++ source or header files. You can modify
 *               this template according to your project's needs.
 * @Note:        Additional notes or important points related to the file.
 * @License:     License information if applicable.
 * @Version:     Version number or other version information.
 * @TODO:        List of tasks or things to be done in the file (if any).
 * @Bug:         List of known issues or bugs (if any).
 * @IDE:         CLion
 ************************************************************************/
// Include necessary headers, if any

// Additional comments or code go here
#include "DOMElementComparator.h"

#include <xercesc/dom/DOM.hpp>
#include <xercesc/dom/DOMElement.hpp>
#include <xercesc/dom/DOMNamedNodeMap.hpp>
#include <xercesc/dom/DOMNodeList.hpp>
#include <xercesc/util/XMLString.hpp>

namespace qi {

DOMElementComparator::DOMElementComparator()
{
  XERCES_CPP_NAMESPACE::XMLPlatformUtils::Initialize();
}
DOMElementComparator::~DOMElementComparator()
{
  XERCES_CPP_NAMESPACE::XMLPlatformUtils::Terminate();
}
ErrorCode::ErrorCodeEnum DOMElementComparator::compareDOMElements(XERCES_CPP_NAMESPACE::DOMElement* element1, XERCES_CPP_NAMESPACE::DOMElement* element2, bool& result)
{
  // 检查节点的标签名是否相同
  if (XERCES_CPP_NAMESPACE::XMLString::compareString(element1->getTagName(), element2->getTagName()) != 0)
  {
    result = false;
  }

  // 检查节点的属性是否相同
  XERCES_CPP_NAMESPACE::DOMNamedNodeMap* attributes1 = element1->getAttributes();
  XERCES_CPP_NAMESPACE::DOMNamedNodeMap* attributes2 = element2->getAttributes();
  if (attributes1->getLength() != attributes2->getLength())
  {
    result = false;
  }
  for (XMLSize_t i = 0; i < attributes1->getLength(); i++)
  {
    XERCES_CPP_NAMESPACE::DOMNode* attribute1 = attributes1->item(i);
    XERCES_CPP_NAMESPACE::DOMNode* attribute2 = attributes2->getNamedItem(attribute1->getNodeName());
    if (!attribute2 || XERCES_CPP_NAMESPACE::XMLString::compareString(attribute1->getNodeValue(), attribute2->getNodeValue()) != 0)
    {
      result = false;
    }
  }

  // 检查子节点是否相同
  XERCES_CPP_NAMESPACE::DOMNode* child1 = element1->getFirstChild();
  XERCES_CPP_NAMESPACE::DOMNode* child2 = element2->getFirstChild();
  bool childResult = false;
  while (child1 && child2)
  {
    if (child1->getNodeType() == child2->getNodeType())
    {
      if (child1->getNodeType() == XERCES_CPP_NAMESPACE::DOMNode::ELEMENT_NODE)
      {
        compareDOMElements(dynamic_cast<XERCES_CPP_NAMESPACE::DOMElement*>(child1), dynamic_cast<XERCES_CPP_NAMESPACE::DOMElement*>(child2), childResult);
        if (!childResult)
        {
          result = false;
        }
      } else if (child1->getNodeType() == XERCES_CPP_NAMESPACE::DOMNode::TEXT_NODE)
      {
        if (XERCES_CPP_NAMESPACE::XMLString::compareString(child1->getNodeValue(), child2->getNodeValue()) != 0)
        {
          result = false;
        }
      }
    } else
    {
      result = false;
    }

    child1 = child1->getNextSibling();
    child2 = child2->getNextSibling();
  }

  // 如果一个节点有子节点而另一个没有，或者子节点数量不同，则认为节点不相同
  if ((child1 && !child2) || (!child1 && child2))
  {
    result = false;
  }

  result = true;
  return ErrorCode::ErrorCodeEnum::SUCCESS;
}

}// namespace qi