//
// Created by qijiabao on 1/6/2024.
//
/*************************************************************************
 * @Project:     paper_analysis
 * @File:        Document.cpp
 * @Brief:       Brief description of the file
 * @Author:      qijiabao
 * @Contact:     Your Contact Information (e.g., email)
 * @Date:        1/6/2024
 * @Description: 
 *               This file is generated by CLion to provide a
 *               template for C/C++ source or header files. You can modify
 *               this template according to your project's needs.
 * @Note:        Additional notes or important points related to the file.
 * @License:     License information if applicable.
 * @Version:     Version number or other version information.
 * @TODO:        List of tasks or things to be done in the file (if any).
 * @Bug:         List of known issues or bugs (if any).
 * @IDE:         CLion
 ************************************************************************/
// Include necessary headers, if any

// Additional comments or code go here#include "Document.h"

#include "Document.h"

#include <iostream>
#include <xercesc/dom/DOMImplementation.hpp>
#include <xercesc/dom/DOMImplementationLS.hpp>
#include <xercesc/dom/DOMImplementationRegistry.hpp>
#include <xercesc/dom/DOMNamedNodeMap.hpp>
#include <xercesc/dom/DOMNodeList.hpp>

namespace qi {
Document::Document()
{
  // 设置解析器 Val_Never 为从不验证
  documentParser_.setValidationScheme(XERCES_CPP_NAMESPACE::XercesDOMParser::Val_Never);
}
Document::~Document()
{
  // 释放解析器

}
// 打开文档
ErrorCode::ErrorCodeEnum Document::openDocument(const std::string &path)
{
  // 解析 XML 文件
  documentParser_.parse(path.c_str());
  // 获取文档
  document_ = documentParser_.getDocument();

  return qi::ErrorCode::ErrorCodeEnum::SUCCESS;
}
// 获取段落块集合
ErrorCode::ErrorCodeEnum Document::getParagraphVetor(std::vector<ParagraphBlock> &paragraphBlockVector)
{
  // char* 转 XMLCh*
  XMLCh *tempString = XERCES_CPP_NAMESPACE::XMLString::transcode("w:p");
  // 获取w:document的w:body的w:p集合
  XERCES_CPP_NAMESPACE::DOMNodeList *paragraphNodeList = document_->getElementsByTagName(tempString);
  // 释放内存
  XERCES_CPP_NAMESPACE::XMLString::release(&tempString);
  // 遍历w:p集合
  for (XMLSize_t i = 0; i < paragraphNodeList->getLength(); ++i)
  {
    // 获取w:p
    XERCES_CPP_NAMESPACE::DOMNode *paragraphNode = paragraphNodeList->item(i);
    // 打印w:p里面的内容
    std::cout << XERCES_CPP_NAMESPACE::XMLString::transcode(paragraphNode->getTextContent()) << std::endl;
  }
  paragraphBlockVector = paragraphBlockVector_;
  return ErrorCode::ErrorCodeEnum::SUCCESS;
}
}// namespace qi